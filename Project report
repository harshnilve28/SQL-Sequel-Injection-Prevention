## **_Introduction_**
This project aimed to create a secure login system to prevent SQL injection attacks, a common security vulnerability in web applications. The project involved designing a **“Teachers Login”** form, allowing authenticated users to access a page with student data. Initially, the form had several security weaknesses, making it vulnerable to SQL injection attacks, which could potentially compromise sensitive data. This report outlines the steps taken to address these vulnerabilities and secure the login process.

## **_Task_**
The primary task was to identify and fix the security vulnerabilities in the login form to protect against SQL injection.  
SQL injection is a method used by attackers to manipulate queries by inserting malicious code through input fields. The objective was to ensure the login system is secure, preventing unauthorized access and safeguarding sensitive data in the database.

## **_Job Done_**
To secure the login form, the following key measures were implemented, reflecting critical parts of the code:  

1. **_Hashing User Credentials:_**  
   Passwords were hashed using PHP's `password_hash()` function before being stored in the database.  
   This ensures passwords remain secure even if the database is compromised.  
   The verification process used `password_verify()` to match the input password with the stored hash securely.  

2. **_Input Sanitization and Validation:_**  
   Inputs, especially the username, were sanitized using `htmlspecialchars()` and `trim()` to clean and validate data.  
   This blocks potentially harmful scripts or SQL fragments before they reach the query.  

3. **_Mandatory Username and Password:_**  
   Both fields were validated to ensure no empty or null entries were processed.  
   Login attempts without valid data were immediately rejected.  

4. **_Prepared Statements and Parameterized Queries:_**  
   SQL queries were rewritten using prepared statements, as implemented in the code using `$stmt = $conn->prepare($sql)` and `$stmt->bind_param()`.  
   This separates the query logic from user inputs, preventing attackers from injecting malicious SQL commands.  

## **_Discussion_**
Before these changes, the login form was highly vulnerable to SQL injection attacks, which could allow attackers to manipulate SQL queries and access sensitive information in the database.  
The lack of input validation and the use of raw queries posed significant risks.  

The revised system now effectively neutralizes these vulnerabilities:  
- By using prepared statements, the application blocks malicious SQL payloads.  
- Sanitization and validation ensure that only clean, expected data are passed to the query.  
- Hashing passwords with secure algorithms adds another layer of protection, making it nearly impossible for attackers to retrieve plain-text passwords, even in the event of a data breach.  

Testing confirmed the system's resilience against SQL injection attempts, including common and advanced attack techniques.  
The secure login flow ensures the system reliably authenticates users while safeguarding sensitive data.  

## **_Conclusion_**
This project demonstrated how simple but effective security measures can significantly enhance web application safety.  
The use of password hashing, input sanitization, and prepared statements eliminated SQL injection vulnerabilities, resulting in a robust and secure login system.  

This highlights the importance of following security best practices in developing cloud-based applications, ensuring sensitive data is protected against unauthorized access.  
The final system serves as a reliable, scalable, and secure solution for real-world deployment.
